<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpHsql</name>
    </assembly>
    <members>
        <member name="T:SharpHsql.Access">
            <summary>
            Access Class.
            The collection (ArrayList) of User object instances within a specific
            database.  Methods are provided for creating, modifying and deleting users,
            as well as manipulating their access rights to the database objects.
            <seealso cref="T:SharpHsql.User" />
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Access.#ctor">
            <summary>
            Access Class constructor.
            Creates a new ArrayList to contain the User object instances, as well
            as creating an initial PUBLIC user, with no password.
            </summary></member>
        <member name="M:SharpHsql.Access.GetRight(System.String)">
            <summary>
            GetRight method declaration.
            This GetRight method takes a string argument of the name of the access right.
            </summary>
            <param name="right">A string representation of the right.</param>
            <returns>A static int representing the string right passed in.</returns></member>
        <member name="M:SharpHsql.Access.GetRight(SharpHsql.AccessType)">
            <summary>
            GetRight method declaration.
            This GetRight method takes a int argument of the access right.
            </summary>
            <param name="right">A static int representing the right passed in</param>
            <returns>A string representation of the right or rights associated with the argument.</returns></member>
        <member name="M:SharpHsql.Access.CreateUser(System.String,System.String,System.Boolean)">
            <summary>
            CreateUser method declaration.
            This method is used to create a new user.  The collection of users
            is first checked for a duplicate name, and an exception will be thrown
            if a user of the same name already exists.
            </summary>
            <param name="name">User login</param>
            <param name="password">Plaintext password</param>
            <param name="admin">Is this a database admin user?</param>
            <returns>An instance of the newly created User object</returns></member>
        <member name="M:SharpHsql.Access.DropUser(System.String)">
            <summary>
            DropUser method declaration.
            This method is used to drop a user.  Since we are using a vector
            to hold the User objects, we must iterate through the ArrayList looking
            for the name.  The user object is currently set to null, and all access
            rights revoked.
            </summary>
            <remarks>
            An ACCESS_IS_DENIED exception will be thrown if an attempt
            is made to drop the PUBLIC user.
            </remarks>
            <param name="name">name of the user to be dropped</param></member>
        <member name="M:SharpHsql.Access.GetUser(System.String,System.String)">
            <summary>
            GetUser method declaration.
            This method is used to return an instance of a particular User object,
            given the user name and password.
            </summary>
            <remarks>
            An ACCESS_IS_DENIED exception will be thrown if an attempt
            is made to get the PUBLIC user.
            </remarks>
            <param name="name">user name</param>
            <param name="password">user password</param>
            <returns>The requested User object</returns></member>
        <member name="M:SharpHsql.Access.GetUsers">
            <summary>
            GetUsers method declaration.
            This method is used to access the entire ArrayList of User objects for this database.
            </summary>
            <returns>The ArrayList of our User objects</returns></member>
        <member name="M:SharpHsql.Access.Grant(System.String,System.String,SharpHsql.AccessType)">
            <summary>
            Grant method declaration.
            This method is used to grant a user rights to database objects.
            </summary>
            <param name="name">name of the user</param>
            <param name="dbobject">object in the database</param>
            <param name="right">right to grant to the user</param></member>
        <member name="M:SharpHsql.Access.Revoke(System.String,System.String,SharpHsql.AccessType)">
            <summary>
            Revoke method declaration.
            This method is used to revoke a user's rights to database objects.
            </summary>
            <param name="name">name of the user</param>
            <param name="dbobject">object in the database</param>
            <param name="right">right to grant to the user</param></member>
        <member name="M:SharpHsql.Access.Get(System.String)">
            <summary>
            This private method is used to access the User objects in the collection
            and perform operations on them.
            </summary>
            <param name="name"></param>
            <returns></returns></member>
        <member name="T:SharpHsql.ByteArray">
            <summary>
            ByteArray class declaration.
            This class allows HSQL to store binary data as an array of bytes.
            It contains methods to create and access the data, perform comparisons, etc.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.ByteArray.#ctor(System.String)">
            <summary>
            ByteArray Constructor declaration.
            Converts a string parameter to the array of bytes the ByteArray object
            will contain.
            </summary>
            <param name="source">The byte array Base64 string representation.</param></member>
        <member name="M:SharpHsql.ByteArray.#ctor(System.Byte[])">
            <summary>
            ByteArray Constructor declaration.
            Creates a ByteArray object from an array of bytes.
            </summary>
            <param name="array"></param></member>
        <member name="P:SharpHsql.ByteArray.Value">
            <summary>
            Value method declaration.
            Give access to the object's data.
            </summary>
            <remarks>The array of bytes representing this objects data.</remarks></member>
        <member name="M:SharpHsql.ByteArray.CompareTo(SharpHsql.ByteArray)">
            <summary>
            CompareTo method declaration.
            This method compares the object to another ByteArray object.
            </summary>
            <param name="compareTo">ByteArray object we are comparing against.</param>
            <returns>Zero if objects are the same, non-zero otherwise.</returns></member>
        <member name="M:SharpHsql.ByteArray.Serialize(System.Object)">
            <summary>
            Serialize method declaration.
            This method serializes an object into an array of bytes.
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>A static byte array representing the passed object</returns></member>
        <member name="M:SharpHsql.ByteArray.SerializeTostring(System.Object)">
            <summary>
            SerializeTostring method declaration.
            This method serializes an object into a string.
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>A string representing the passed object</returns></member>
        <member name="M:SharpHsql.ByteArray.Deserialize">
            <summary>
            Deserialize method declaration.
            This method returns the array of bytes stored in the instance of
            ByteArray class as an object instance.
            </summary>
            <returns>The deserialized object</returns></member>
        <member name="M:SharpHsql.ByteArray.Deserialize(System.Byte[])">
            <summary>
            Deserialize method declaration.
            This method returns the array of bytes stored in the instance of
            ByteArray class as an object instance.
            </summary>
            <returns>The deserialized object</returns></member>
        <member name="M:SharpHsql.ByteArray.CreateString(System.Byte[])">
            <summary>
            Createstring method declaration.
            This method creates a string from the passed array of bytes.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A Base64 string representation of the byte array.</returns></member>
        <member name="M:SharpHsql.ByteArray.ToString">
            <summary>
            ToString method declaration.
            This method creates a string from the passed array of bytes stored in
            this instance of the ByteArray class.
            </summary>
            <returns>The string representation of the ByteArray.</returns></member>
        <member name="M:SharpHsql.ByteArray.GetHashCode">
            <summary>
            GetHashCode method declaration.
            This method returns the hashcode for the data stored in this instance of
            the ByteArray class.
            </summary>
            <returns></returns></member>
        <member name="T:SharpHsql.Cache">
            <summary>
            Cache class declaration.
            The cache class implements the handling of cached tables.
            <seealso cref="T:SharpHsql.Row" />
            <seealso cref="T:SharpHsql.CacheFree" />
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Cache.#ctor(System.String)">
            <summary>
            Cache constructor declaration.
            The cache constructor sets up the initial parameters of the cache
            object, setting the name used for the file, etc.
            </summary>
            <param name="name">The name of database file</param></member>
        <member name="M:SharpHsql.Cache.Open(System.Boolean)">
            <summary>
            Open method declaration.
            The open method creates or opens a database file.
            </summary>
            <param name="readOnly">Flag that indicates if this cache is readonly</param></member>
        <member name="M:SharpHsql.Cache.Flush">
            <summary>
            Flush method declaration.
            The flush method saves all cached data to the file, saves the free position
            and closes the file.
            </summary></member>
        <member name="M:SharpHsql.Cache.Shutdown">
            <summary>
            Shutdown method declaration.
            The shutdown method closes the cache file.
            It does not flush pending writes.
            </summary></member>
        <member name="M:SharpHsql.Cache.Free(SharpHsql.Row,System.Int32,System.Int32)">
            <summary>
            Free method declaration.
            This method marks space in the database file as free.
            </summary>
            <remarks>
            If more than MAX_FREE_COUNT free positios then
            they are probably all are too small anyway; so we start a new list.
            TODO: This is wrong when deleting lots of records.
            </remarks>
            <param name="row">Row object to be marked free</param>
            <param name="pos">Offset in the file this Row was stored at</param>
            <param name="length">Size of the Row object to free</param></member>
        <member name="M:SharpHsql.Cache.Add(SharpHsql.Row)">
            <summary>
            Add method declaration.
            This method adds a Row to the Cache.  It walks the
            list of CacheFree objects to see if there is available space
            to store the new Row, reusing space if it exists, otherwise
            we grow the file.
            </summary>
            <param name="row">Row to be added to Cache</param></member>
        <member name="M:SharpHsql.Cache.GetRow(System.Int32,SharpHsql.Table)">
            <summary>
            GetRow method declaration.
            This method reads a Row object from the cache.
            </summary>
            <param name="pos">Offset of the requested Row in the cache</param>
            <param name="table">Table this Row belongs to</param>
            <returns>The Row object as read from the cache.</returns></member>
        <member name="M:SharpHsql.Cache.CleanUp">
            <summary>
            CleanUp method declaration.
            This method cleans up the cache when it grows too large. It works by
            checking Rows in held in the Cache's iLastAccess member and removing
            Rows that haven't been accessed in the longest time.
            </summary></member>
        <member name="M:SharpHsql.Cache.Remove(SharpHsql.Row)">
            <summary>
            Remove method declaration.
            This method is used to remove Rows from the Cache. It is called
            by the CleanUp method.
            </summary>
            <param name="row">Row to be removed</param></member>
        <member name="M:SharpHsql.Cache.GetWorst">
            <summary>
            GetWorst method declaration.
            This method finds the Row with the smallest (oldest) iLastAccess member.
            Called by the Cleanup method.
            </summary>
            <returns>The selected Row object</returns></member>
        <member name="M:SharpHsql.Cache.SaveAll">
            <summary>
            </summary></member>
        <member name="M:SharpHsql.Cache.SaveSorted(System.Int32)">
            <summary>
            </summary></member>
        <member name="M:SharpHsql.Cache.Sort(SharpHsql.Row[],System.Int32,System.Int32)">
            <summary>
            </summary></member>
        <member name="M:SharpHsql.Cache.Swap(SharpHsql.Row[],System.Int32,System.Int32)">
            <summary>
            </summary></member>
        <member name="T:SharpHsql.CacheFree">
            <summary>
            CacheFree Class declaration.
            This class is essentially an object used to create a singly linked list of
            the free space available in a HSQL database file.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="F:SharpHsql.CacheFree.Pos">
            <summary>
            Item position.
            </summary></member>
        <member name="F:SharpHsql.CacheFree.Length">
            <summary>
            Item length.
            </summary></member>
        <member name="F:SharpHsql.CacheFree.Next">
            <summary>
            Next entry.
            </summary></member>
        <member name="T:SharpHsql.Channel">
            <summary>
            Class that represents a user connection with a database.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Channel.#ctor">
            <summary>
            Private default constructor.
            </summary></member>
        <member name="M:SharpHsql.Channel.#ctor(SharpHsql.Channel,System.Int32)">
            <summary>
            Builds a channel based on an existing one.
            </summary>
            <param name="channel"></param>
            <param name="id"></param></member>
        <member name="M:SharpHsql.Channel.#ctor(SharpHsql.Database,SharpHsql.User,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Builds a new channel.
            </summary>
            <param name="db"></param>
            <param name="user"></param>
            <param name="autoCommit"></param>
            <param name="readOnly"></param>
            <param name="id"></param></member>
        <member name="F:SharpHsql.Channel.SyncRoot">
            <summary>
            Synchronization object.
            </summary></member>
        <member name="P:SharpHsql.Channel.Id">
            <summary>
            Gets the channel identifier.
            </summary></member>
        <member name="P:SharpHsql.Channel.IsClosed">
            <summary>
            Return True if the channel is closed.
            </summary></member>
        <member name="P:SharpHsql.Channel.UserName">
            <summary>
            Gets the current user name.
            </summary></member>
        <member name="P:SharpHsql.Channel.IsReadOnly">
            <summary>
            Returns True if the channel is in read only mode.
            </summary>
            <returns></returns></member>
        <member name="P:SharpHsql.Channel.MaxRows">
            <summary>
            Gets or sets the maximum count of rows to return.
            </summary></member>
        <member name="M:SharpHsql.Channel.Execute(System.String)">
            <summary>
            Executes a SQL query on the current channel.
            </summary>
            <param name="statement"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Channel.Disconnect">
            <summary>
            Disconnects the current channel from database.
            </summary></member>
        <member name="M:SharpHsql.Channel.SetAutoCommit(System.Boolean)">
            <summary>
            Sets the auto commit mode for this channel.
            </summary>
            <param name="autoCommit"></param></member>
        <member name="M:SharpHsql.Channel.Commit">
            <summary>
            Commits all pending transactions.
            </summary></member>
        <member name="M:SharpHsql.Channel.Rollback">
            <summary>
            Rollbacks all pending transactions.
            </summary></member>
        <member name="M:SharpHsql.Channel.SetReadOnly(System.Boolean)">
            <summary>
            Sets the channel in read-only mode.
            </summary>
            <param name="readOnly"></param></member>
        <member name="M:SharpHsql.Channel.AddDeclare(SharpHsql.Declare)">
            <summary>
            Adds a declare object to the current channel.
            </summary>
            <param name="declare"></param></member>
        <member name="M:SharpHsql.Channel.SetDeclareValue(System.String,System.Object)">
            <summary>
            Sets a declare object value.
            </summary>
            <param name="name"></param>
            <param name="value"></param></member>
        <member name="M:SharpHsql.Channel.GetDeclare(System.String)">
            <summary>
            Gets a declare object.
            </summary>
            <param name="name"></param></member>
        <member name="M:SharpHsql.Channel.GetDeclareValue(System.String)">
            <summary>
            Gets a declare object value.
            </summary>
            <param name="name"></param></member>
        <member name="P:SharpHsql.Channel.LastIdentity">
            <summary>
            Gets or Sets the last identity value for the current channel.
            </summary></member>
        <member name="P:SharpHsql.Channel.Database">
            <summary>
            Gets the current channel database.
            </summary></member>
        <member name="M:SharpHsql.Channel.SetUser(SharpHsql.User)">
            <summary>
            Sets the current user for the channel.
            </summary>
            <param name="user"></param></member>
        <member name="M:SharpHsql.Channel.CheckAdmin">
            <summary>
            Verifies if the current user is database admin.
            </summary></member>
        <member name="M:SharpHsql.Channel.Check(System.String,SharpHsql.AccessType)">
            <summary>
            Check a desired right over an specific database object.
            </summary>
            <param name="databaseObject"></param>
            <param name="right"></param></member>
        <member name="M:SharpHsql.Channel.CheckReadWrite">
            <summary>
            Verifies if the database is in read only state.
            </summary></member>
        <member name="M:SharpHsql.Channel.SetPassword(System.String)">
            <summary>
            Sets the current user password.
            </summary>
            <param name="password"></param></member>
        <member name="M:SharpHsql.Channel.AddTransactionDelete(SharpHsql.Table,System.Object[])">
            <summary>
            Add a delete transaction to the current transaction list.
            </summary>
            <param name="table"></param>
            <param name="row"></param></member>
        <member name="M:SharpHsql.Channel.AddTransactionInsert(SharpHsql.Table,System.Object[])">
            <summary>
            Add an insert transaction to the current transaction list.
            </summary>
            <param name="table"></param>
            <param name="row"></param></member>
        <member name="M:SharpHsql.Channel.BeginNestedTransaction">
            <summary>
            Begins a new nested transaction.
            </summary></member>
        <member name="M:SharpHsql.Channel.EndNestedTransaction(System.Boolean)">
            <summary>
            Finalizes a nested transaction.
            </summary>
            <param name="rollback"></param></member>
        <member name="P:SharpHsql.Channel.IsNestedTransaction">
            <summary>
            Returns True if a nested transaction is active.
            </summary>
            <returns></returns></member>
        <member name="M:SharpHsql.Channel.Dispose">
            <summary>
            Clean up any used resources.
            </summary></member>
        <member name="P:SharpHsql.Channel.Disposed">
            <summary>
            Get the disposed status.
            </summary></member>
        <member name="M:SharpHsql.Channel.Finalize">
            <summary>
            Class Destructor.
            </summary></member>
        <member name="T:SharpHsql.Column">
            <summary>
            Class representing a database column.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="F:SharpHsql.Column.Types">
            <summary>
            Collection of all supported column types.
            </summary></member>
        <member name="M:SharpHsql.Column.#ctor(System.String,System.Boolean,SharpHsql.ColumnType,System.Boolean)">
            <summary>
            Constructor declaration.
            </summary>
            <param name="name">Column name.</param>
            <param name="nullable">Flag indicating if the column supports nulls.</param>
            <param name="type">DataType of the column.</param>
            <param name="identity">Flag indicating if the column is identity.</param></member>
        <member name="P:SharpHsql.Column.Name">
            <summary>
            Name of the column.
            </summary></member>
        <member name="P:SharpHsql.Column.ColumnType">
            <summary>
            Internal type of the column.
            </summary></member>
        <member name="P:SharpHsql.Column.IsIdentity">
            <summary>
            Returns True id the column is identity.
            </summary></member>
        <member name="P:SharpHsql.Column.IsNullable">
            <summary>
            Returns True if the column accepts null values.
            </summary></member>
        <member name="M:SharpHsql.Column.GetColumnType(System.String)">
            <summary>
            Gets the Type code of the string representation of a data type.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.IsValidDataType(System.String)">
            <summary>
            Gets if the string passed is a valid data type.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.GetColumnTypeString(SharpHsql.ColumnType)">
            <summary>
            Gets the string representation of the passed Type code.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.GetDbType(SharpHsql.ColumnType)">
            <summary>
            Gets the string representation of the passed Type code.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Add(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Adds two values of the specified type.
            </summary>
            <param name="one">The first operand to Add.</param>
            <param name="two">The second operand to Add.</param>
            <param name="type">The data type of the two operands.</param>
            <returns>The result of the Add operation.</returns></member>
        <member name="M:SharpHsql.Column.Concat(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Cancatenates two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Negate(System.Object,SharpHsql.ColumnType)">
            <summary>
            Negate the passed object.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Multiply(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Multiply two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Divide(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Divide two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Subtract(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Subtract two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Sum(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Sum two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Avg(System.Object,SharpHsql.ColumnType,System.Int32)">
            <summary>
            Calculates the object average.
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <param name="count"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Min(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Calculates the minimum value.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Max(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Calculates the maximum value.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.Compare(System.Object,System.Object,SharpHsql.ColumnType)">
            <summary>
            Compare two objects.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.ConvertString(System.String,SharpHsql.ColumnType)">
            <summary>
            Convert from string representation.
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.ConvertToString(System.Object,SharpHsql.ColumnType)">
            <summary>
            Convert to string from object.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.ConvertToObject(System.Object,SharpHsql.ColumnType)">
            <summary>
            Convert to object making a string/object roundtrip.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.CreateString(System.Object,SharpHsql.ColumnType)">
            <summary>
            Returns the string representation of the object.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.CreateString(System.String)">
            <summary>
            Gets the string representation of the data.
            </summary>
            <param name="source"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.ReadData(System.IO.BinaryReader,System.Int32)">
            <summary>
            Read column data from file.
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.WriteData(System.IO.BinaryWriter,System.Object[],SharpHsql.Table)">
            <summary>
            Write column data to file.
            </summary>
            <param name="writer"></param>
            <param name="data"></param>
            <param name="table"></param></member>
        <member name="M:SharpHsql.Column.WriteData(System.IO.BinaryWriter,System.Int32,SharpHsql.ColumnType[],System.Object[])">
            <summary>
            Write column data to file.
            </summary>
            <param name="writer"></param>
            <param name="length"></param>
            <param name="type"></param>
            <param name="data"></param></member>
        <member name="M:SharpHsql.Column.GetSize(System.Object[],SharpHsql.Table)">
            <summary>
            Gets the size of the stored data.
            </summary>
            <param name="data"></param>
            <param name="table"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.GetSize(System.Object[],System.Int32,SharpHsql.ColumnType[])">
            <summary>
            Gets the size of the stored data.
            </summary>
            <param name="data"></param>
            <param name="l"></param>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Column.AddTypes(SharpHsql.ColumnType,System.String,System.String,System.String)">
            <summary>
            Creates the internal Types collection.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="n2"></param>
            <param name="n3"></param></member>
        <member name="M:SharpHsql.Column.AddType(SharpHsql.ColumnType,System.String)">
            <summary>
            Adds a specific type to the collection.
            </summary>
            <param name="type"></param>
            <param name="name"></param></member>
        <member name="T:SharpHsql.Constraint">
            <summary>
            Class representing a database constraint.
            <seealso cref="T:SharpHsql.Table" />
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Constraint.#ctor(SharpHsql.ConstraintType,SharpHsql.Table,System.Int32[])">
            <summary>
            Constructor using only the Main Table.
            </summary>
            <param name="type"></param>
            <param name="table"></param>
            <param name="col"></param></member>
        <member name="M:SharpHsql.Constraint.#ctor(SharpHsql.ConstraintType,SharpHsql.Table,SharpHsql.Table,System.Int32[],System.Int32[])">
            <summary>
            Constructor using Main and Reference Table.
            </summary>
            <param name="type"></param>
            <param name="main"></param>
            <param name="child"></param>
            <param name="columnMain"></param>
            <param name="columnRef"></param></member>
        <member name="P:SharpHsql.Constraint.ConstraintType">
            <summary>
            Gets the constraint type.
            </summary></member>
        <member name="P:SharpHsql.Constraint.MainTable">
            <summary>
            Gets the main table.
            </summary></member>
        <member name="P:SharpHsql.Constraint.RefTable">
            <summary>
            Gets the reference table.
            </summary></member>
        <member name="P:SharpHsql.Constraint.MainTableColumns">
            <summary>
            Gets the main table columns.
            </summary></member>
        <member name="P:SharpHsql.Constraint.RefTableColumns">
            <summary>
            Gets the referenced table columns.
            </summary></member>
        <member name="M:SharpHsql.Constraint.ReplaceTable(SharpHsql.Table,SharpHsql.Table)">
            <summary>
            Replaces the main or reference table with a new one.
            </summary>
            <param name="oldTable"></param>
            <param name="newTable"></param></member>
        <member name="M:SharpHsql.Constraint.CheckInsert(System.Object[])">
            <summary>
            Verify if the insert operation can be performed.
            </summary>
            <param name="row"></param></member>
        <member name="M:SharpHsql.Constraint.CheckDelete(System.Object[])">
            <summary>
            Verify if the delete operation can be performed.
            </summary>
            <param name="row"></param></member>
        <member name="M:SharpHsql.Constraint.CheckUpdate(System.Int32[],SharpHsql.Result,SharpHsql.Result)">
            <summary>
            Verify if the update operation can be performed.
            </summary>
            <param name="col"></param>
            <param name="deleted"></param>
            <param name="inserted"></param></member>
        <member name="M:SharpHsql.Constraint.IsAffected(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Verify if this constraint is affected by the database operation.
            </summary>
            <param name="col"></param>
            <param name="col2"></param>
            <param name="len"></param>
            <returns></returns></member>
        <member name="T:SharpHsql.Database">
            <summary>
            Database class declaration.
            Database is the root class for HSQL Database Engine database.
            This class should not be used directly by the application,
            instead the ADO.NET provider classes should be used.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:SharpHsql.Database.#ctor(System.String)">
            <summary>
            Database class constructor.
            </summary>
            <param name="name">The database name to open or create.</param></member>
        <member name="P:SharpHsql.Database.Name">
            <summary>
            Returns the database name.
            </summary></member>
        <member name="P:SharpHsql.Database.IsShutdown">
            <summary>
            Returns True if the database is shutdown.
            </summary></member>
        <member name="M:SharpHsql.Database.Connect(System.String,System.String)">
            <summary>
            Connects to the database using an user and password.
            </summary>
            <param name="userName">The user name to connect.</param>
            <param name="password">The password to use.</param>
            <returns>The created channel object.</returns></member>
        <member name="M:SharpHsql.Database.Execute(System.String,System.String,System.String)">
            <summary>
            Executes an SQL statement and return the results.
            </summary>
            <param name="user">The user name to use.</param>
            <param name="password">The password to use.</param>
            <param name="statement">The SQL statement to execute.</param>
            <returns>The Result object.</returns></member>
        <member name="M:SharpHsql.Database.Execute(System.String,SharpHsql.Channel)">
            <summary>
            Executes an SQL statement and return the results.
            </summary>
            <param name="statement">The SQL statement to execute.</param>
            <param name="channel">The channel to use.</param>
            <returns>The Result object.</returns></member>
        <member name="M:SharpHsql.Database.SetReadOnly">
            <summary>
            Sets the database readonly mode.
            </summary></member>
        <member name="P:SharpHsql.Database.IsIgnoreCase">
            <summary>
            True if case must be ignored.
            </summary></member>
        <member name="P:SharpHsql.Database.Tables">
            <summary>
            Gets the tables collection.
            </summary></member>
        <member name="M:SharpHsql.Database.RegisterChannel(SharpHsql.Channel)">
            <summary>
            Register an existing channel in this database.
            </summary>
            <param name="channel"></param></member>
        <member name="P:SharpHsql.Database.IsReferentialIntegrity">
            <summary>
            Gets or sets the referential integrity check.
            </summary></member>
        <member name="P:SharpHsql.Database.Alias">
            <summary>
            Gets the database alias objects.
            </summary></member>
        <member name="M:SharpHsql.Database.Dispose">
            <summary>
            Clean up any used resources.
            </summary></member>
        <member name="M:SharpHsql.Database.Finalize">
            <summary>
            Class Destructor.
            </summary></member>
        <member name="T:SharpHsql.DatabaseController">
            <summary>
            Controller class for single point database access.
            </summary></member>
        <member name="M:SharpHsql.DatabaseController.GetDatabase(System.String)">
            <summary>
            Gets a <see cref="T:SharpHsql.Database" /> instance by name.
            </summary>
            <remarks>
            This class mantains a cache of already created database
            objects to prevent opening the same database more than once,
            because database files are open exclusively.
            </remarks>
            <param name="name">Database full path.</param>
            <returns>A reference of a new or existing database object.</returns></member>
        <member name="M:SharpHsql.DatabaseController.Shutdown(System.String)">
            <summary>
            Shutdown an already open database.
            </summary>
            <param name="name">The name of the database.</param></member>
        <member name="M:SharpHsql.DatabaseController.ShutdownAll">
            <summary>
            Shut down all active database instances.
            </summary></member>
        <member name="T:SharpHsql.DatabaseInformation">
            <summary>
            DatabaseInformation class.
            </summary></member>
        <member name="T:SharpHsql.Declare">
            <summary>
            Class used for parsing of DECLARE statements.
            </summary></member>
        <member name="F:SharpHsql.Declare.Expression">
            <summary>
            The expression that represents the variable.
            </summary></member>
        <member name="F:SharpHsql.Declare.Name">
            <summary>
            The variable name.
            </summary></member>
        <member name="F:SharpHsql.Declare.Value">
            <summary>
            Variable value.
            </summary></member>
        <member name="M:SharpHsql.Declare.GetResult">
            <summary>
            Get the variable value.
            </summary>
            <returns></returns></member>
        <member name="T:SharpHsql.Expression">
            <summary>
            Class that represents an expression.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Expression.#ctor(SharpHsql.Function)">
            <summary>
            Expression constructor using a <see cref="T:SharpHsql.Function" />.
            </summary>
            <param name="f"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(SharpHsql.Expression)">
            <summary>
            Expression constructor using an <see cref="T:SharpHsql.Expression" />.
            </summary>
            <param name="e"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(SharpHsql.Select)">
            <summary>
            Expression constructor using a <see cref="T:SharpHsql.Select" />.
            </summary>
            <param name="s"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(System.Collections.ArrayList)">
            <summary>
            Expression constructor using a values list.
            </summary>
            <param name="v"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(SharpHsql.ExpressionType,SharpHsql.Expression,SharpHsql.Expression)">
            <summary>
            Expression constructor using two expressions as arguments.
            </summary>
            <param name="type"></param>
            <param name="e"></param>
            <param name="e2"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(System.String,System.String)">
            <summary>
            Expression constructor using a table select.
            </summary>
            <param name="table"></param>
            <param name="column"></param></member>
        <member name="M:SharpHsql.Expression.#ctor(SharpHsql.ColumnType,System.Object)">
            <summary>
            Expression constructor using a value.
            </summary>
            <param name="datatype"></param>
            <param name="o"></param></member>
        <member name="P:SharpHsql.Expression.Type">
            <summary>
            Gets or sets the expression type.
            </summary></member>
        <member name="P:SharpHsql.Expression.IsAggregate">
            <summary>
            Returns True if expression is Aggregate.
            </summary></member>
        <member name="P:SharpHsql.Expression.IsVarAssign">
            <summary>
            Returns True if expression is a Variable assignation.
            </summary></member>
        <member name="P:SharpHsql.Expression.IsDescending">
            <summary>
            Gets or sets if expression is ordered.
            </summary></member>
        <member name="P:SharpHsql.Expression.Alias">
            <summary>
            Gets or sets the expression alias.
            </summary></member>
        <member name="P:SharpHsql.Expression.ColumnNumber">
            <summary>
            Gets the column index that this expression applies to.
            </summary></member>
        <member name="P:SharpHsql.Expression.Arg">
            <summary>
            Gets the expression first argument.
            </summary></member>
        <member name="P:SharpHsql.Expression.Arg2">
            <summary>
            Gets the expression second argument.
            </summary></member>
        <member name="P:SharpHsql.Expression.Filter">
            <summary>
            Gets the expression filter.
            </summary></member>
        <member name="P:SharpHsql.Expression.ColumnType">
            <summary>
            Gets or sets the column type.
            </summary></member>
        <member name="P:SharpHsql.Expression.IsResolved">
            <summary>
            Gets if the current expression is already resolved.
            </summary>
            <returns></returns></member>
        <member name="P:SharpHsql.Expression.TableName">
            <summary>
            Gets the table name for this expression.
            </summary></member>
        <member name="P:SharpHsql.Expression.ColumnName">
            <summary>
            Gets the column name for this expression.
            </summary></member>
        <member name="M:SharpHsql.Expression.SetLikeEscape(System.Char)">
            <summary>
            Sets the escape character.
            </summary>
            <param name="c"></param></member>
        <member name="M:SharpHsql.Expression.SetArg(System.Object)">
            <summary>
            Sets the first argument value.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.Expression.SetArg2(System.Object)">
            <summary>
            Sets the second argument value.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.Expression.SetDataType(SharpHsql.ColumnType)">
            <summary>
            Sets the column data type.
            </summary>
            <param name="type"></param></member>
        <member name="M:SharpHsql.Expression.SetTrue">
            <summary>
            Set the expression as True.
            </summary></member>
        <member name="M:SharpHsql.Expression.CheckResolved">
            <summary>
            Check if the expression is resolved, recursively.
            </summary></member>
        <member name="M:SharpHsql.Expression.Resolve(SharpHsql.TableFilter)">
            <summary>
            Resolve the current expression.
            </summary>
            <param name="filter"></param></member>
        <member name="M:SharpHsql.Expression.SwapCondition">
            <summary>
            Swaps the conditions for this expression.
            </summary></member>
        <member name="M:SharpHsql.Expression.GetValue(SharpHsql.ColumnType)">
            <summary>
            Gets the resulting expression value with a column type.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Expression.IsCompare(SharpHsql.ExpressionType)">
            <summary>
            Gets if the expression is some type of comparison.
            </summary>
            <param name="type"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Expression.GetValue">
            <summary>
            Gets the expression resulting value.
            </summary>
            <returns></returns></member>
        <member name="M:SharpHsql.Expression.TestValueList(System.Object,SharpHsql.ColumnType)">
            <summary>
            Test the value list for True or False.
            </summary>
            <param name="o"></param>
            <param name="datatype"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.Expression.Test">
            <summary>
            Test condition for True or False value.
            </summary>
            <returns></returns></member>
        <member name="T:SharpHsql.ExpressionType">
            <summary>
            Enum that defines all types of expressions.
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Value">
            <summary>
            Simple value
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Query">
            <summary>
            Database query
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.True">
            <summary>
            Boolean True
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.ValueList">
            <summary>
            Value list
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Asterix">
            <summary>
            Asterix
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Function">
            <summary>
            Function
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Variable">
            <summary>
            Variable
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Negate">
            <summary>
            Negate
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Add">
            <summary>
            Add
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Subtract">
            <summary>
            Subtract
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Multiply">
            <summary>
            Multiply
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Divide">
            <summary>
            Divide
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Concat">
            <summary>
            Concat
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Not">
            <summary>
            Not
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Equal">
            <summary>
            Equal
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.BiggerEqual">
            <summary>
            BiggerEqual
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Bigger">
            <summary>
            Bigger
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Smaller">
            <summary>
            Smaller
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.SmallerEqual">
            <summary>
            SmallerEqual
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.NotEqual">
            <summary>
            NotEqual
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Like">
            <summary>
            Like
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.And">
            <summary>
            And
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Or">
            <summary>
            Or
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.In">
            <summary>
            In
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Exists">
            <summary>
            Exist
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Count">
            <summary>
            Count
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Sum">
            <summary>
            Sum
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Minimum">
            <summary>
            Minimum
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Maximum">
            <summary>
            Maximum
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Average">
            <summary>
            Average
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.IfNull">
            <summary>
            IfNull
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Convert">
            <summary>
            Convert
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.CaseWhen">
            <summary>
            CaseWhen
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Plus">
            <summary>
            Plus
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Open">
            <summary>
            Open
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Close">
            <summary>
            Close
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Select">
            <summary>
            Select
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Comma">
            <summary>
            Comma
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.StringConcat">
            <summary>
            StringConcat
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Between">
            <summary>
            Between
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Cast">
            <summary>
            Cast
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.End">
            <summary>
            End
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.SquareBracketLeft">
            <summary>
            The square bracket left.
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.SquareBracketRight">
            <summary>
            The square bracket right.
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Dot">
            <summary>
            The dot.
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.DatabaseColumn">
            <summary>
            Database column
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.RowNumber">
            <summary>
            ROW_NUMBER
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Over">
            <summary>
            OVER
            </summary></member>
        <member name="F:SharpHsql.ExpressionType.Rownum">
            <summary>
            ROWNUM - short syntax for ROW_NUMBER
            </summary></member>
        <member name="T:SharpHsql.Function">
            <summary>
            Wrapper class for an external Function.
            </summary></member>
        <member name="T:SharpHsql.Index">
            <summary>
            Index class.
            </summary></member>
        <member name="T:SharpHsql.Library">
            <summary>
            Internal SharpHsql functions library.
            </summary>
            <remarks>version 1.0.0.1</remarks></member>
        <member name="M:SharpHsql.Library.Abs(System.Double)">
            <summary>
            Returns the absolute value of the given double value.
            </summary>
            <param name="value">The number for which to determine the absolute value.</param>
            <returns>The absolute value of d, as a double.</returns></member>
        <member name="M:SharpHsql.Library.Trim(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the character sequence s, with the leading,
            trailing or both the leading and trailing occurences of the first
            character of the character sequence trimstr removed.
            </summary>
            <param name="source">The string to trim.</param>
            <param name="trimstr">The character whose occurences will be removed.</param>
            <param name="leading">If true, remove leading occurences.</param>
            <param name="trailing">If true, remove trailing occurences.</param>
            <returns>Source, with the leading, trailing or both the leading and trailing
            occurences of the first character of trimstr removed.</returns>
            <remarks>
            This method is in support of the standard SQL String function TRIM.
            Ordinarily, the functionality of this method is accessed from SQL using
            the following syntax:
            <code>
            * &lt;trim function&gt; ::= TRIM &lt;left paren&gt; &lt;trim operands&gt; &lt;right paren&gt;
            &lt;trim operands&gt; ::= [ [ &lt;trim specification&gt; ] [ &lt;trim character&gt; ] FROM ] &lt;trim source&gt;
            &lt;trim source&gt; ::= &lt;character value expression&gt;
            &lt;trim specification&gt; ::= LEADING | TRAILING | BOTH
            &lt;trim character&gt; ::= &lt;character value expression&gt;
            </code>
            (since HSQLDB 1.7.2)
            </remarks></member>
        <member name="M:SharpHsql.Library.Datediff(System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns the number of units elapsed between two dates.
            Contributed by Michael Landon
            </summary>
            <param name="datepart">Specifies the unit in which the interval is to be measured.</param>
            <param name="d1">The starting datetime value for the interval. This value is
            subtracted from d2 to return the number of date-parts between the two arguments.</param>
            <param name="d2">The ending datetime for the interval. d1 is subtracted
            from this value to return the number of date-parts between the two arguments.</param>
            <returns></returns></member>
        <member name="T:SharpHsql.Like">
            <summary>
            Like class.
            </summary></member>
        <member name="T:SharpHsql.Node">
            <summary>
            Node class.
            </summary></member>
        <member name="T:SharpHsql.Record">
            <summary>
            Class representing a record of data in a result.
            </summary>
            <remarks>This class implements a simple
            linked list, where each record point to the
            following in the results chain.
            </remarks></member>
        <member name="F:SharpHsql.Record.Data">
            <summary>
            Array of column data that this record holds.
            </summary></member>
        <member name="F:SharpHsql.Record.Next">
            <summary>
            Pointer to the next record in the chain.
            </summary></member>
        <member name="T:SharpHsql.ReflexHelper">
            <summary>
            Provides utility methods for reflection-related operations.
            </summary></member>
        <member name="M:SharpHsql.ReflexHelper.GetAssemblyConfiguration(System.Reflection.Assembly)">
            <summary>
            Gets the Assembly Configuration Attribute.
            </summary>
            <param name="assembly">Assembly to get configuration.</param>
            <returns></returns></member>
        <member name="M:SharpHsql.ReflexHelper.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Gets an assembly full path and file name.
            </summary>
            <param name="assembly">Assembly to get path.</param>
            <returns></returns></member>
        <member name="M:SharpHsql.ReflexHelper.GetAssemblyTitle(System.Reflection.Assembly)">
            <summary>
            Gets the Assembly Title.
            </summary>
            <param name="assembly">Assembly to get title.</param>
            <returns></returns></member>
        <member name="M:SharpHsql.ReflexHelper.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            Instructs a compiler to use a specific version number for the Win32 file version resource.
            The Win32 file version is not required to be the same as the assembly's version number.
            </summary>
            <param name="assembly">Assembly to get version.</param>
            <returns></returns></member>
        <member name="M:SharpHsql.ReflexHelper.GetAssemblyProduct(System.Reflection.Assembly)">
            <summary>
            Gets the Assembly Product.
            </summary>
            <param name="assembly">Assembly to get product.</param>
            <returns></returns></member>
        <member name="T:SharpHsql.Result">
            <summary>
            Class used for results transport resulting of a query execution.
            </summary></member>
        <member name="M:SharpHsql.Result.#ctor">
            <summary>
            Default constructor
            </summary></member>
        <member name="M:SharpHsql.Result.#ctor(System.String)">
            <summary>
            Result constructor with error.
            </summary>
            <param name="error"></param></member>
        <member name="M:SharpHsql.Result.#ctor(System.Int32)">
            <summary>
            Result constructor with columns.
            </summary>
            <param name="columns"></param></member>
        <member name="M:SharpHsql.Result.#ctor(System.Byte[])">
            <summary>
            Constructor for a result based on a byte stream.
            </summary>
            <param name="b"></param></member>
        <member name="P:SharpHsql.Result.Name">
            <summary>
            Get the column names in the result.
            </summary></member>
        <member name="P:SharpHsql.Result.Table">
            <summary>
            Array containing the table name for each column.
            </summary></member>
        <member name="P:SharpHsql.Result.Label">
            <summary>
            Array containing the column labels.
            </summary></member>
        <member name="P:SharpHsql.Result.Type">
            <summary>
            Array containing the data type for each column.
            </summary></member>
        <member name="P:SharpHsql.Result.Root">
            <summary>
            Get the root record for this result.
            </summary></member>
        <member name="P:SharpHsql.Result.UpdateCount">
            <summary>
            Get the updated rows count.
            </summary></member>
        <member name="P:SharpHsql.Result.Mode">
            <summary>
            Get the result type.
            </summary></member>
        <member name="P:SharpHsql.Result.Error">
            <summary>
            Get or set the error description.
            </summary></member>
        <member name="P:SharpHsql.Result.Size">
            <summary>
            Get the result size.
            </summary></member>
        <member name="P:SharpHsql.Result.ColumnCount">
            <summary>
            Get the column count in the result.
            </summary></member>
        <member name="M:SharpHsql.Result.SetRoot(SharpHsql.Record)">
            <summary>
            Sets the result root record.
            </summary>
            <param name="root"></param></member>
        <member name="M:SharpHsql.Result.SetUpdateCount(System.Int32)">
            <summary>
            Sets the update count.
            </summary>
            <param name="count"></param></member>
        <member name="M:SharpHsql.Result.SetColumnCount(System.Int32)">
            <summary>
            Sets the column count.
            </summary>
            <param name="count"></param></member>
        <member name="M:SharpHsql.Result.Append(SharpHsql.Result)">
            <summary>
            Append a result to this results.
            </summary>
            <param name="result"></param></member>
        <member name="M:SharpHsql.Result.Add(System.Object[])">
            <summary>
            Add a row to this results.
            </summary>
            <param name="d"></param></member>
        <member name="M:SharpHsql.Result.GetBytes">
            <summary>
            Serializes the result into a byte array.
            </summary>
            <returns></returns></member>
        <member name="T:SharpHsql.Row">
            <summary>
            Row class.
            </summary></member>
        <member name="T:SharpHsql.Select">
            <summary>
            Class representing a SELECT operation.
            </summary></member>
        <member name="T:SharpHsql.StringConverter">
            <summary>
            String helper class.
            </summary></member>
        <member name="T:SharpHsql.Table">
            <summary>
            Table class.
            </summary></member>
        <member name="T:SharpHsql.TableFilter">
            <summary>
            Table filter class.
            </summary></member>
        <member name="M:SharpHsql.TableFilter.#ctor(SharpHsql.Table,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="t"></param>
            <param name="alias"></param>
            <param name="outerjoin"></param></member>
        <member name="T:SharpHsql.Transaction">
            <summary>
            Class representing a database transaction.
            </summary></member>
        <member name="M:SharpHsql.Transaction.Rollback">
            <summary>
            Cancels an active transaction.
            </summary></member>
        <member name="T:SharpHsql.User">
            <summary>
            Class representing a database user.
            </summary></member>
        <member name="M:SharpHsql.User.#ctor(System.String,System.String,System.Boolean,SharpHsql.User)">
            <summary>
            Internal Class constructor.
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <param name="admin"></param>
            <param name="pub"></param></member>
        <member name="P:SharpHsql.User.IsAdmin">
            <summary>
            True if the user is an administrator.
            </summary></member>
        <member name="P:SharpHsql.User.Name">
            <summary>
            Gets the user name.
            </summary></member>
        <member name="P:SharpHsql.User.Password">
            <summary>
            Get or set the user password.
            </summary></member>
        <member name="P:SharpHsql.User.Rights">
            <summary>
            Get the user rights.
            </summary></member>
        <member name="M:SharpHsql.User.CheckPassword(System.String)">
            <summary>
            Checks the user password.
            </summary>
            <param name="test">The password to test.</param></member>
        <member name="M:SharpHsql.User.Grant(System.String,SharpHsql.AccessType)">
            <summary>
            Grant a right for the user on the database object.
            </summary>
            <param name="dbobject"></param>
            <param name="right"></param></member>
        <member name="M:SharpHsql.User.Revoke(System.String,SharpHsql.AccessType)">
            <summary>
            Revoke the specified right from a database object.
            </summary>
            <param name="dbobject"></param>
            <param name="right"></param></member>
        <member name="M:SharpHsql.User.RevokeAll">
            <summary>
            Revoke all permissions.
            </summary></member>
        <member name="M:SharpHsql.User.Check(System.String,SharpHsql.AccessType)">
            <summary>
            Checks a database object for the specified right.
            </summary>
            <param name="dbobject">Database object checking.</param>
            <param name="right">Desired right.</param></member>
        <member name="M:SharpHsql.User.CheckAdmin">
            <summary>
            Check if the user has administrative priviledges.
            </summary></member>
        <member name="T:SharpHsql.EventLogHelper">
            <summary>
            Provides static methods that supply helper utilities for event log data access. This class cannot be inherited.
            </summary>
            <remarks>
            A more general logger class is <see cref="T:SharpHsql.LogHelper" />
            used by applications to log messages
            </remarks>
            <author>Andr�s G Vettori</author></member>
        <member name="M:SharpHsql.EventLogHelper.WriteLogEntry(System.String)">
            <summary>
            Writes an entry in the event log.
            </summary>
            <param name="message">The string to write to the event log.</param></member>
        <member name="M:SharpHsql.EventLogHelper.WriteLogEntry(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Writes an entry in the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="eventType">One of the System.Diagnostics.EventLogEntryType values.</param></member>
        <member name="M:SharpHsql.EventLogHelper.WriteLogEntry(System.String,System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
            Writes an entry in the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="eventType">One of the System.Diagnostics.EventLogEntryType values.</param>
            <param name="logsource">The source by which the application is registered on the specified computer.</param></member>
        <member name="M:SharpHsql.EventLogHelper.WriteLogEntry(System.String,System.Diagnostics.EventLogEntryType,System.String,System.String)">
            <summary>
            Writes an entry in the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="eventType">One of the System.Diagnostics.EventLogEntryType values.</param>
            <param name="logsource">The source by which the application is registered on the specified computer.</param>
            <param name="logtype">
            The name of the log the source's entries are written to.
            Possible values include: Application, Security, System, or a custom event log.
            If you do not specify a value, the logName defaults to Application.
            </param></member>
        <member name="M:SharpHsql.EventLogHelper.WriteLogEntry(System.String,System.Diagnostics.EventLogEntryType,System.String,System.String,System.Int32)">
            <summary>
            Writes an entry in the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="eventType">One of the System.Diagnostics.EventLogEntryType values.</param>
            <param name="logsource">The source by which the application is registered on the specified computer.</param>
            <param name="logtype">
            The name of the log the source's entries are written to.
            Possible values include: Application, Security, System, or a custom event log.
            If you do not specify a value, the logtype defaults to Application.
            </param>
            <param name="eventID">The application-specific identifier for the event.</param></member>
        <member name="M:SharpHsql.EventLogHelper.RemoveLogType">
            <summary>
            Removes the LogType.
            </summary></member>
        <member name="M:SharpHsql.EventLogHelper.RemoveLogType(System.String)">
            <summary>
            Removes an event log from the local computer.
            </summary>
            <param name="logtype">
            The name of the log the source's entries are written to.
            Possible values include: Application, Security, System, or a custom event log.
            If you do not specify a value, the logName defaults to Application.
            </param></member>
        <member name="M:SharpHsql.EventLogHelper.RemoveEventSource">
            <summary>
            Removes an event log from the local computer.
            </summary></member>
        <member name="M:SharpHsql.EventLogHelper.RemoveEventSource(System.String)">
            <summary>
            Removes the event source registration from the event log of the local computer.
            </summary>
            <param name="logsource">The source by which the application is registered on the specified computer.</param></member>
        <member name="P:SharpHsql.EventLogHelper.DefaultLogType">
            <summary>
            Default Log Type.
            </summary></member>
        <member name="P:SharpHsql.EventLogHelper.DefaultLogSource">
            <summary>
            Default Log Source.
            </summary></member>
        <member name="T:SharpHsql.LogEntryType">
            <summary>
            Specifies the event type of an log entry.
            </summary>
            <remarks>
            The type of an log entry is used to indicate the severity of a log entry.
            Each log must be of a single type, which the application indicates when it reports the log.
            </remarks></member>
        <member name="F:SharpHsql.LogEntryType.Audit">
            <summary>
            An audit log. This indicates a successful audit.
            </summary></member>
        <member name="F:SharpHsql.LogEntryType.Debug">
            <summary>
            A debug log. This is for testing and debugging operations.
            </summary></member>
        <member name="F:SharpHsql.LogEntryType.Information">
            <summary>
            An information log. This indicates a significant, successful operation.
            </summary></member>
        <member name="F:SharpHsql.LogEntryType.Warning">
            <summary>
            A warning log.
            This indicates a problem that is not immediately significant,
            but that may signify conditions that could cause future problems.
            </summary></member>
        <member name="F:SharpHsql.LogEntryType.Error">
            <summary>
            An error log.
            This indicates a significant problem the user should know about;
            usually a loss of functionality or data.
            </summary></member>
        <member name="F:SharpHsql.LogEntryType.Fatal">
            <summary>
            An fatal log.
            This indicates a fatal problem the user should know about;
            allways a loss of functionality or data.
            </summary></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.String)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <remarks>
            For Debugging or Information uses, its faster to use ILog
            interface directly, instead of this method.
            </remarks>
            <param name="message">Additional exception info.</param></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.Exception)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <param name="exception">Exception object.</param></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.Exception,SharpHsql.LogEntryType)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <param name="exception">Exception object.</param>
            <param name="exceptionTpe">See <see cref="T:SharpHsql.LogEntryType" />.</param></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.String,SharpHsql.LogEntryType)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <remarks>
            For Debugging or Information uses, its faster to use ILog
            interface directly, instead of this method.
            </remarks>
            <param name="message">Additional exception info.</param>
            <param name="exceptionTpe">See <see cref="T:SharpHsql.LogEntryType" />.</param></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.String,System.Exception)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <param name="message">Additional exception info.</param>
            <param name="exception">Exception object.</param></member>
        <member name="M:SharpHsql.LogHelper.Publish(System.String,System.Exception,SharpHsql.LogEntryType)">
            <summary>
            Write Exception Info to the ILog interface.
            </summary>
            <param name="message">Additional exception info.</param>
            <param name="exception">Exception object.</param>
            <param name="exceptionTpe">See <see cref="T:SharpHsql.LogEntryType" />.</param></member>
        <member name="T:SharpHsql.Log">
            <summary>
            This class is responsible for most file handling.
            </summary>
            <remarks>
            A HSQL database consists of a .properties file, a
            .script file (contains a SQL script), a
            .data file (contains data of cached tables) and a
            .backup file (contains the compressed .data file).
            This is an example of the .properties file. The version and the
            modified properties are automatically created by the database and
            should not be changed manually.
            The other properties are optional, this means they are not
            created automatically by the database, but they are interpreted
            if they exist in the .script file. They have to be created
            manually if required. If they don't exist the default is used.
            This are the defaults for the database 'mytest':
            <code>
            &lt;?xml version="1.0"?&gt;
            &lt;!--SharpHSQL Configuration--&gt;
            &lt;?Instruction Configuration Record?&gt;
            &lt;Properties
            		LogFile="mytest.log"
            		DataFile="mytest.data"
            		Backup="mytest.backup"
            		Version="1.0.0.0"
            		ReadOnly="false"
            		Modified="no" /&gt;
            </code>
            </remarks></member>
        <member name="M:SharpHsql.Log.#ctor(SharpHsql.Database,SharpHsql.Channel,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="db"></param>
            <param name="system"></param>
            <param name="name"></param></member>
        <member name="M:SharpHsql.Log.Run">
            <summary>
            Flush the transaction log.
            </summary></member>
        <member name="M:SharpHsql.Log.SetWriteDelay(System.Boolean)">
            <summary>
            Sets the write delay.
            </summary>
            <param name="delay"></param></member>
        <member name="M:SharpHsql.Log.Open">
            <summary>
            Opens the database files.
            </summary>
            <returns>True if operation is sucessful.</returns></member>
        <member name="M:SharpHsql.Log.Stop">
            <summary>
            Stops the log writer thread.
            </summary></member>
        <member name="M:SharpHsql.Log.Close(System.Boolean)">
            <summary>
            Close the transaction log.
            </summary>
            <param name="compact"></param></member>
        <member name="M:SharpHsql.Log.Checkpoint">
            <summary>
            Performs a checkpoint operation on the database.
            </summary></member>
        <member name="M:SharpHsql.Log.SetLogSize(System.Int32)">
            <summary>
            Sets the maximum log size.
            </summary>
            <param name="mb"></param></member>
        <member name="M:SharpHsql.Log.Write(SharpHsql.Channel,System.String)">
            <summary>
            Writes a SQL statement to the transaction log.
            </summary>
            <param name="channel"></param>
            <param name="s"></param></member>
        <member name="M:SharpHsql.Log.Shutdown">
            <summary>
            Shutdown the transaction log.
            </summary></member>
        <member name="M:SharpHsql.Log.ScriptToFile(SharpHsql.Database,System.String,System.Boolean,SharpHsql.Channel)">
            <summary>
            Script the database objects to a file.
            </summary>
            <param name="db"></param>
            <param name="file"></param>
            <param name="full"></param>
            <param name="channel"></param></member>
        <member name="M:SharpHsql.Log.RenameNewToCurrent(System.String)">
            <summary>
            Renames a .new files to be the current database files.
            </summary>
            <param name="file"></param></member>
        <member name="M:SharpHsql.Log.CloseProperties">
            <summary>
            Close the database properties file.
            </summary></member>
        <member name="M:SharpHsql.Log.Create">
            <summary>
            Creates a new properties files.
            </summary></member>
        <member name="M:SharpHsql.Log.IsAlreadyOpen">
            <summary>
            Checks if the database is already open.
            </summary>
            <returns>True if the databse file is open.</returns></member>
        <member name="M:SharpHsql.Log.LoadProperties">
            <summary>
            Load properties from file.
            </summary></member>
        <member name="M:SharpHsql.Log.SaveProperties">
            <summary>
            Save database properties.
            </summary></member>
        <member name="M:SharpHsql.Log.Backup">
            <summary>
            Performs a backup of the current database.
            </summary></member>
        <member name="M:SharpHsql.Log.RestoreBackup">
            <summary>
            Restores a previous backup.
            </summary></member>
        <member name="M:SharpHsql.Log.OpenScript">
            <summary>
            Opens the transaction log for writing.
            </summary></member>
        <member name="M:SharpHsql.Log.CloseScript">
            <summary>
            Close the transaction log file.
            </summary></member>
        <member name="M:SharpHsql.Log.RunScript">
            <summary>
            Opens the transaction log and runs it.
            </summary></member>
        <member name="M:SharpHsql.Log.WriteScript(System.Boolean)">
            <summary>
            Script database to file.
            </summary>
            <param name="full"></param></member>
        <member name="M:SharpHsql.Log.writeLine(System.IO.StreamWriter,System.String)">
            <summary>
            Writes a line to the log.
            </summary>
            <param name="w"></param>
            <param name="s"></param></member>
        <member name="M:SharpHsql.Log.ReadLine(System.IO.TextReader)">
            <summary>
            Reads a line from the log.
            </summary>
            <param name="reader"></param>
            <returns></returns></member>
        <member name="T:SharpHsql.TracingHelper">
            <summary>
            Internal Trace and Exceptions helper class.
            </summary></member>
        <member name="M:SharpHsql.TracingHelper.#ctor">
            <summary>
            Default internal constructor.
            </summary></member>
        <member name="M:SharpHsql.TracingHelper.GetError(System.Int32,System.String)">
            <summary>
            Gets an exception object from an error code and description.
            </summary>
            <param name="code"></param>
            <param name="add"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.GetMessage(System.Int32)">
            <summary>
            Gets an error message from a code.
            </summary>
            <param name="code"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.GetMessage(System.Exception)">
            <summary>
            Gets an error message from an exception.
            </summary>
            <param name="e"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.GetError(System.String)">
            <summary>
            Gets an exception from a string message.
            </summary>
            <param name="msg"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.Error(System.Int32)">
            <summary>
            Gets an exception from a code.
            </summary>
            <param name="code"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.Error(System.Int32,System.String)">
            <summary>
            Gets an exception from a code and string message.
            </summary>
            <param name="code"></param>
            <param name="s"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.Error(System.Int32,System.Int32)">
            <summary>
            Gets an exception from a code and numeric value.
            </summary>
            <param name="code"></param>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:SharpHsql.TracingHelper.Assert(System.Boolean)">
            <summary>
            Asserts a condition.
            </summary>
            <param name="condition"></param></member>
        <member name="M:SharpHsql.TracingHelper.Assert(System.Boolean,System.String)">
            <summary>
            Asserts a condition with an error message.
            </summary>
            <param name="condition"></param>
            <param name="error"></param></member>
        <member name="M:SharpHsql.TracingHelper.Check(System.Boolean,System.Int32)">
            <summary>
            Checks a condition with an error code.
            </summary>
            <param name="condition"></param>
            <param name="code"></param></member>
        <member name="M:SharpHsql.TracingHelper.Check(System.Boolean,System.Int32,System.String)">
            <summary>
            Checks a condition with an error code and error message.
            </summary>
            <param name="condition"></param>
            <param name="code"></param>
            <param name="s"></param></member>
        <member name="M:SharpHsql.TracingHelper.PrintLine(System.Char[])">
            <summary>
            Prints a text line.
            </summary>
            <param name="c"></param></member>
        <member name="M:SharpHsql.TracingHelper.Write(System.Int64)">
            <summary>
            Write a long value to the trace log.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.TracingHelper.Write(System.Int32)">
            <summary>
            Write a int value to the trace log.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.TracingHelper.Write">
            <summary>
            Write a empty string to the trace log.
            </summary></member>
        <member name="M:SharpHsql.TracingHelper.Write(System.String)">
            <summary>
            Write a string to the trace log.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.TracingHelper.Stop">
            <summary>
            Stops the tracing.
            </summary></member>
        <member name="M:SharpHsql.TracingHelper.Stop(System.String)">
            <summary>
            Stops the tracing with an error message.
            </summary>
            <param name="value"></param></member>
        <member name="M:SharpHsql.TracingHelper.PrintStack">
            <summary>
            Prints the stack trace.
            </summary></member>
        <member name="M:SharpHsql.TracingHelper.TraceCaller(System.String)">
            <summary>
            Prints the stack trace.
            </summary>
            <param name="value"></param></member>
        <member name="T:SharpHsql.Parser">
            <summary>
            Query Parser class.
            </summary></member>
        <member name="M:SharpHsql.Parser.ProcessAlter">
            <summary>
            Process ALTER TABLE statements.
            ALTER TABLE tableName ADD COLUMN columnName columnType;
            ALTER TABLE tableName DELETE COLUMN columnName;
            </summary>
            <remarks>
            The only change I've made to Sergio's original code was
            changing the insert's to call insertNoCheck to bypass the trigger
            mechanism that is a part of hsqldb 1.60 and beyond. - Mark Tutt
            </remarks>
            <returns></returns></member>
        <member name="T:SharpHsql.TokenType">
            <summary>
            Enum that defines the token type.
            </summary></member>
        <member name="F:SharpHsql.TokenType.NAME">
            <summary>
            Token is a name.
            </summary></member>
        <member name="F:SharpHsql.TokenType.LONG_NAME">
            <summary>
            Token is a long name.
            </summary></member>
        <member name="F:SharpHsql.TokenType.SPECIAL">
            <summary>
            Token is a special character.
            </summary></member>
        <member name="F:SharpHsql.TokenType.NUMBER">
            <summary>
            Token is a number.
            </summary></member>
        <member name="F:SharpHsql.TokenType.FLOAT">
            <summary>
            Token is a float.
            </summary></member>
        <member name="F:SharpHsql.TokenType.STRING">
            <summary>
            Token is a string.
            </summary></member>
        <member name="F:SharpHsql.TokenType.LONG">
            <summary>
            Token is a long.
            </summary></member>
        <member name="F:SharpHsql.TokenType.VARIABLE">
            <summary>
            Token is a variable.
            </summary></member>
        <member name="F:SharpHsql.TokenType.QUOTED_IDENTIFIER">
            <summary>
            Quoted identifier. Used only internally.
            </summary></member>
        <member name="F:SharpHsql.TokenType.REMARK_LINE">
            <summary>
            Remark. Used only internally.
            </summary></member>
        <member name="F:SharpHsql.TokenType.REMARK">
            <summary>
            Remark. Used only internally.
            </summary></member>
        <member name="T:SharpHsql.SelectType">
            <summary>
            Enum that defines the select type.
            </summary></member>
        <member name="F:SharpHsql.SelectType.Union">
            <summary>
            Select is a UNION
            </summary></member>
        <member name="F:SharpHsql.SelectType.UnionAll">
            <summary>
            Select is a UNION ALL
            </summary></member>
        <member name="F:SharpHsql.SelectType.Intersect">
            <summary>
            Select is an intercect.
            </summary></member>
        <member name="F:SharpHsql.SelectType.Except">
            <summary>
            Select is an exclusion.
            </summary></member>
        <member name="T:SharpHsql.ResultType">
            <summary>
            Enum that defines the result type.
            </summary></member>
        <member name="F:SharpHsql.ResultType.Error">
            <summary>
            Result has errors.
            </summary></member>
        <member name="F:SharpHsql.ResultType.UpdateCount">
            <summary>
            Rows updated.
            </summary></member>
        <member name="F:SharpHsql.ResultType.Data">
            <summary>
            Result as data.
            </summary></member>
        <member name="T:SharpHsql.ConstraintType">
            <summary>
            Enum that describes the different constraint types.
            </summary></member>
        <member name="F:SharpHsql.ConstraintType.ForeignKey">
            <summary>
            Constraint is a foreign key.
            </summary></member>
        <member name="F:SharpHsql.ConstraintType.Main">
            <summary>
            Constraint is main type.
            </summary></member>
        <member name="F:SharpHsql.ConstraintType.Unique">
            <summary>
            Constraint is a unique constraint.
            </summary></member>
        <member name="T:SharpHsql.ColumnType">
            <summary>
            Enum that defines all the data types supported.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Bit">
            <summary>
            Boolean data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.TinyInt">
            <summary>
            Byte data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.BigInt">
            <summary>
            Long data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.LongVarBinary">
            <summary>
            Binary data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.VarBinary">
            <summary>
            Binary data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Binary">
            <summary>
            Binary data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.LongVarChar">
            <summary>
            String data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Char">
            <summary>
            String data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Numeric">
            <summary>
            Numeric data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.DbDecimal">
            <summary>
            Decimal data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Integer">
            <summary>
            Int data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.SmallInt">
            <summary>
            Short data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Float">
            <summary>
            Float data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Real">
            <summary>
            Real data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.DbDouble">
            <summary>
            Double data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.VarChar">
            <summary>
            String data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Date">
            <summary>
            Date data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Time">
            <summary>
            Time data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Timestamp">
            <summary>
            Timestamp data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Other">
            <summary>
            Object data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.Null">
            <summary>
            Null data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.VarCharIgnoreCase">
            <summary>
            String data type.
            </summary></member>
        <member name="F:SharpHsql.ColumnType.UniqueIdentifier">
            <summary>
            Guid data type.
            </summary></member>
        <member name="T:SharpHsql.AccessType">
            <summary>
            Enum that defines all the access types supported.
            </summary></member>
        <member name="F:SharpHsql.AccessType.None">
            <summary>
            None Access.
            </summary></member>
        <member name="F:SharpHsql.AccessType.Select">
            <summary>
            Select access.
            </summary></member>
        <member name="F:SharpHsql.AccessType.Delete">
            <summary>
            Delete access.
            </summary></member>
        <member name="F:SharpHsql.AccessType.Insert">
            <summary>
            Insert access.
            </summary></member>
        <member name="F:SharpHsql.AccessType.Update">
            <summary>
            Update access.
            </summary></member>
        <member name="F:SharpHsql.AccessType.All">
            <summary>
            All access.
            </summary></member>
        <member name="T:System.Data.Hsql.CommandBuilder">
            <summary>
            Command builder class.
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:System.Data.Hsql.CommandBuilder.#ctor">
            <summary>
            Default constructor.
            </summary></member>
        <member name="P:System.Data.Hsql.CommandBuilder.DataAdapter">
            <summary>
            Get or set the <see cref="T:System.Data.IDbDataAdapter" /> instance.
            </summary></member>
        <member name="P:System.Data.Hsql.CommandBuilder.QuotePrefix">
            <summary>
            Get or set the quote prefix to use.
            </summary></member>
        <member name="P:System.Data.Hsql.CommandBuilder.QuoteSuffix">
            <summary>
            Get or set the quote suffix to use.
            </summary></member>
        <member name="P:System.Data.Hsql.CommandBuilder.SourceCommand">
            <summary>
            Get the source command.
            </summary></member>
        <member name="M:System.Data.Hsql.CommandBuilder.Dispose">
            <summary>
            Dispose method.
            </summary></member>
        <member name="M:System.Data.Hsql.CommandBuilder.GetInsertCommand">
            <summary>
            Get a command for Insert.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.GetUpdateCommand">
            <summary>
            Get a command for Update.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.GetDeleteCommand">
            <summary>
            Get a command for Delete.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.RefreshSchema">
            <summary>
            Refresh database schema
            </summary></member>
        <member name="M:System.Data.Hsql.CommandBuilder.BuildSchemaTableInfoTableNames(System.String[])">
            <summary>
            Build the schema information table.
            </summary>
            <param name="columnNameArray"></param></member>
        <member name="M:System.Data.Hsql.CommandBuilder.GetSortedSchemaRows(System.Data.DataTable)">
            <summary>
            Get the schema row.
            </summary>
            <param name="dataTable"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.SrcCompare(System.String,System.String)">
            <summary>
            Helper routine to compare two strings case sensitive and using the current culture.
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.DstCompare(System.String,System.String)">
            <summary>
            Helper routine to compare two strings case insensitive and using the current culture
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.IsEmpty(System.String)">
            <summary>
            Helper routine used for empty strings comparison.
            </summary>
            <param name="str"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.IsEmpty(System.String[])">
            <summary>
            Helper routine used for empty string arrays comparison.
            </summary>
            <param name="array"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.FindBuilder(System.MulticastDelegate)">
            <summary>
            Internal delegate.
            </summary>
            <param name="mcd"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.CommandBuilder.IsNull(System.Object)">
            <summary>
            Helper routine for nullable objects comparison.
            </summary>
            <param name="value"></param>
            <returns></returns></member>
        <member name="T:System.Data.Hsql.CommandBuilderBehavior">
            <summary>
            Enum describing the command builder behavior.
            <seealso cref="T:System.Data.Hsql.CommandBuilder" />
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.Default">
            <summary>
            Default behavior.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.UpdateSetSameValue">
            <summary>
            When doing update use the original value if not changed.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.UseRowVersionInUpdateWhereClause">
            <summary>
            Use row version where doing updates.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.UseRowVersionInDeleteWhereClause">
            <summary>
            Use row version where doing deletes.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.UseRowVersionInWhereClause">
            <summary>
            Use row version in selects.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.PrimaryKeyOnlyUpdateWhereClause">
            <summary>
            Compare matching row using only primary key and not all columns when updating.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.PrimaryKeyOnlyDeleteWhereClause">
            <summary>
            Compare matching row using only primary key and not all columns when deleting.
            </summary></member>
        <member name="F:System.Data.Hsql.CommandBuilderBehavior.PrimaryKeyOnlyWhereClause">
            <summary>
            Compare matching row using only primary key and not all columns.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlCommand">
            <summary>
            Command class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.#ctor">
            <summary>
            Default constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.#ctor(System.String)">
            <summary>
            Constructor using a command text.
            </summary>
            <param name="sCommand"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.#ctor(System.String,System.Data.Hsql.SharpHsqlConnection)">
            <summary>
            Constructor using a command text and connection.
            </summary>
            <param name="sCommand"></param>
            <param name="conn"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.CommandText">
            <summary>
            Command text to be executed.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.CommandTimeout">
            <summary>
            Get or set Execution timeout for the command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.CommandType">
            <summary>
            Get or set the Type of the current command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.Connection">
            <summary>
            Get or set the Connection being used by the current command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.DbConnection">
            <summary>
            Get or set the Connection being used by the current command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.DbTransaction">
            <summary>
            Get or set the Connection being used by the current command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#Connection">
            <summary>
            Get or set the Connection being used by the current command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#Parameters">
            <summary>
            Command parameter collection.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.Parameters">
            <summary>
            Command parameter collection.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.Transaction">
            <summary>
            Get or set the Transaction object for use by this command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#Transaction">
            <summary>
            Get or set the Transaction object for use by this command.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.UpdatedRowSource">
            <summary>
            Get or set the <see cref="T:System.Data.UpdateRowSource" /> for the command.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.Cancel">
            <summary>
            Cancels the current operation.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.CreateParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.Hsql.SharpHsqlParameter" /> object.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.Hsql.SharpHsqlParameter" /> object.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a query with no results.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            Executes a query returning an <see cref="T:System.Data.Hsql.SharpHsqlReader" /> object.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes a query returning an <see cref="T:System.Data.Hsql.SharpHsqlReader" /> object.
            </summary>
            <param name="behavior"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.ExecuteReader">
            <summary>
            Executes a query returning an <see cref="T:System.Data.Hsql.SharpHsqlReader" /> object.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes a query returning an <see cref="T:System.Data.Hsql.SharpHsqlReader" /> object.
            </summary>
            <param name="behavior"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.ExecuteScalar">
            <summary>
            Executes a query returning a single result.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.ExecuteXmlReader">
            <summary>
            Executes a query that returns results as XML.
            </summary>
            <remarks>Not currently supported.</remarks>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.Prepare">
            <summary>
            Prepare a stored procedure on the database.
            </summary>
            <remarks>Not currently supported.</remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.Clone">
            <summary>
            Makes a clone of the current object.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.DeriveParameters">
            <summary>
            Derive parameters from a stored procedure.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommand.Result">
            <summary>
            Query results from SharpHsql database.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlCommand._connection">
            <summary>
            Connection object used internally.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommand.System#IDisposable#Dispose">
            <summary>
            Dispose the current command.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlCommandBuilder">
            <summary>
            CommandBuilder component for design time.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Component constructor.
            </summary>
            <param name="container"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.#ctor">
            <summary>
            Default constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.#ctor(System.Data.Hsql.SharpHsqlDataAdapter)">
            <summary>
            Constructor using an <see cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />.
            </summary>
            <param name="adapter"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.DeriveParameters(System.Data.Hsql.SharpHsqlCommand)">
            <summary>
            Derive command parameters.
            </summary>
            <param name="command"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the delete command.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.GetInsertCommand">
            <summary>
            Gets the insert command.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the update command.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.RefreshSchema">
            <summary>
            Refresh the database schema.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommandBuilder.DataAdapter">
            <summary>
            Get or set the <see cref="T:System.Data.Hsql.SharpHsqlDataAdapter" /> object used.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommandBuilder.QuotePrefix">
            <summary>
            Get or set the quote prefix.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlCommandBuilder.QuoteSuffix">
            <summary>
            Get or set the quote suffix.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlCommandBuilder.components">
            <summary>
            Required designer variable.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlCommandBuilder.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlConnection">
            <summary>
            Class representing a database connection.
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.#ctor">
            <summary>
            Default Constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.#ctor(System.String)">
            <summary>
            Constructor using a connection string.
            </summary>
            <param name="connectionString"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.#ctor(System.Data.Hsql.SharpHsqlConnection)">
            <summary>
            Private constructor used internally.
            </summary>
            <param name="connection"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.ConnectionString">
            <summary>
            Get or set the connection string.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.ConnectionTimeout">
            <summary>
            Get the current connection timeout.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.Database">
            <summary>
            Get the current database name.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.State">
            <summary>
            Get the current connection state.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.BeginTransaction">
            <summary>
            Starts a new transaction using the default isolation level (ReadCommitted).
            <seealso cref="T:System.Data.IsolationLevel" />
            </summary>
            <returns>The new <see cref="T:System.Data.Hsql.SharpHsqlTransaction" /> object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.System#Data#IDbConnection#BeginTransaction">
            <summary>
            Starts a new transaction using the default isolation level (ReadCommitted).
            <seealso cref="T:System.Data.IsolationLevel" />
            </summary>
            <returns>The new <see cref="T:System.Data.Hsql.SharpHsqlTransaction" /> object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            <seealso cref="T:System.Data.IsolationLevel" />
            </summary>
            <param name="level"></param>
            <returns>The new <see cref="T:System.Data.Hsql.SharpHsqlTransaction" /> object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction.
            <seealso cref="T:System.Data.IsolationLevel" />
            </summary>
            <param name="level"></param>
            <returns>The new <see cref="T:System.Data.Hsql.SharpHsqlTransaction" /> object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for this connection.
            </summary>
            <remarks>Not currently supported.</remarks>
            <param name="databaseName"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.Close">
            <summary>
            Closes the current connection.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.CreateCommand">
            <summary>
            Creates a new SharpHsqlCommand object.
            </summary>
            <returns>A new SharpHsqlCommand object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.System#Data#IDbConnection#CreateCommand">
            <summary>
            Creates a new SharpHsqlCommand object.
            </summary>
            <returns>A new SharpHsqlCommand object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.Open">
            <summary>
            Open the current connection.
            </summary></member>
        <member name="E:System.Data.Hsql.SharpHsqlConnection.InfoMessage">
            <summary>
            InfoMessage event.
            </summary></member>
        <member name="E:System.Data.Hsql.SharpHsqlConnection.StateChange">
            <summary>
            StateChange event.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.Clone">
            <summary>
            Get a clone of the current instance.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.System#ICloneable#Clone">
            <summary>
            Get a clone of the current instance.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.Dispose(System.Boolean)">
            <summary>
            Clean up used resources.
            </summary>
            <param name="disposing"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.RollbackDeadTransaction">
            <summary>
            Rollbacks any dead transaction before doing something else.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.InternalRollback">
            <summary>
            Executes a rollback command on the database.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.CloseDeadReader">
            <summary>
            Closes any active reader before doing something else.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnection._connState">
            <summary>
            Connection state
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnection._connString">
            <summary>
            Connection string
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnection._database">
            <summary>
            Database name
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.Reader">
            <summary>
            Active reader using this connection.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.InternalDatabase">
            <summary>
            Database instance associated with this connection.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlConnection.Channel">
            <summary>
            Internal SharpHsql channel associated with this connection.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnection.Execute(System.String)">
            <summary>
            Executes the sql query and return the results.
            </summary>
            <param name="sqlBatch"></param>
            <returns></returns></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnection.LocalTransaction">
            <summary>
            Local transaction object used internally.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlDataAdapter">
            <summary>
            Data adapter class for SharpHsql.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor">
            <summary>
            Default constructor
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor(System.Data.Hsql.SharpHsqlCommand)">
            <summary>
            Constructor using a <see cref="T:System.Data.Hsql.SharpHsqlCommand" /> object.
            </summary>
            <param name="selectCommand"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
            <summary>
            Internal constructor used for cloning.
            </summary>
            <param name="adapter"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor(System.String)">
            <summary>
            Constructor using a command text string.
            </summary>
            <param name="selectCommandText"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructor using a command text string and a select connection string.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnectionString"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.#ctor(System.String,System.Data.Hsql.SharpHsqlConnection)">
            <summary>
            Constructor using a command text string and a select connection object.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnection"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> to fire the RowUpdated event.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> to fire the RowUpdating event.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Fires the RowUpdated event.
            </summary>
            <param name="value"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Fires the RowUpdating event.
            </summary>
            <param name="value"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlDataAdapter.SelectCmd">
            <summary>
            Get or set the select command used.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlDataAdapter.UpdateCmd">
            <summary>
            Get or set the update command used.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlDataAdapter.InsertCmd">
            <summary>
            Get or set the insert command used.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlDataAdapter.DeleteCmd">
            <summary>
            Get or set the delete command used.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.Dispose(System.Boolean)">
            <summary>
            Clean up any used resources.
            </summary>
            <param name="disposing"></param></member>
        <member name="E:System.Data.Hsql.SharpHsqlDataAdapter.RowUpdated">
            <summary>
            RowUpdated event.
            </summary>
            <remarks>Not supportes on Compact Framework 1.0</remarks></member>
        <member name="E:System.Data.Hsql.SharpHsqlDataAdapter.RowUpdating">
            <summary>
            Row updating event.
            </summary>
            <remarks>Not supportes on Compact Framework 1.0</remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.Clone">
            <summary>
            Returns a clone of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Data.Hsql.SharpHsqlDataAdapter" /> object clone of the current.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.System#ICloneable#Clone">
            <summary>
            Returns a clone of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Data.Hsql.SharpHsqlDataAdapter" /> object clone of the current.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.Fill(System.Data.DataSet)">
            <summary>
            Fills a <see cref="T:System.Data.DataSet" /> object.
            </summary>
            <param name="dataSet"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.GetFillParameters">
            <summary>
            Get the fill parameters.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
            <summary>
            Fills the schema.
            </summary>
            <param name="dataSet"></param>
            <param name="schemaType"></param>
            <returns>The schema <see cref="T:System.Data.DataTable" />.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDataAdapter.Update(System.Data.DataSet)">
            <summary>
            Update the database using the passed <see cref="T:System.Data.DataSet" />.
            </summary>
            <param name="dataSet"></param>
            <returns></returns></member>
        <member name="T:System.Data.Hsql.SharpHsqlError">
            <summary>
            Error object used in <see cref="T:System.Data.Hsql.SharpHsqlException" />.
            <seealso cref="T:System.Data.Hsql.SharpHsqlErrorCollection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlException" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlError.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
            <param name="number"></param>
            <param name="procedure"></param>
            <param name="source"></param></member>
        <member name="F:System.Data.Hsql.SharpHsqlError.Message">
            <summary>
            Textual description for this error.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlError.Number">
            <summary>
            Error code for this error.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlError.Procedure">
            <summary>
            Procedure where this error was waised.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlError.Source">
            <summary>
            Source module of this error.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlErrorCollection">
            <summary>
            Strong typed collection of <see cref="T:System.Data.Hsql.SharpHsqlError" /> objects used in <see cref="T:System.Data.Hsql.SharpHsqlException" />.
            <seealso cref="T:System.Data.Hsql.SharpHsqlError" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlException" />
            </summary>
            <remarks>Not serializable on Compact Framework 1.0</remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlErrorCollection.#ctor">
            <summary>
            Default constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlErrorCollection.Add(System.Data.Hsql.SharpHsqlError)">
            <summary>
            Strong typed version of the Add method for adding <see cref="T:System.Data.Hsql.SharpHsqlError" />
            objects to the collection.
            <seealso cref="T:System.Data.Hsql.SharpHsqlError" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlException" />
            </summary>
            <param name="error"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlErrorCollection.Item(System.Int32)">
            <summary>
            Strong typed version of the Add method for adding <see cref="T:System.Data.Hsql.SharpHsqlError" />
            objects to the collection.
            <seealso cref="T:System.Data.Hsql.SharpHsqlError" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlException" />
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlInfoMessageEventHandler">
            <summary>
            InfoMessage event for Hsql ADO.NET data provider.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlRowUpdatedEventHandler">
            <summary>
            Row Updated event for Hsql ADO.NET data provider.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlRowUpdatingEventHandler">
            <summary>
            Row Updating event for Hsql ADO.NET data provider.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlInfoMessageEventArgs">
            <summary>
            InfoMessage argument class for Hsql ADO.NET data provider.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.#ctor(System.Data.Hsql.SharpHsqlException)">
            <summary>
            Internal constructor.
            </summary>
            <param name="exception"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.ShouldSerializeErrors">
            <summary>
            True if exists eny errors that should be serialized.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns></member>
        <member name="P:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.Errors">
            <summary>
            Error collection
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.Message">
            <summary>
            Message
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlInfoMessageEventArgs.Source">
            <summary>
            Exception Source.
            </summary>
            <remarks>Not supported on Compact Framwork 1.0.</remarks></member>
        <member name="T:System.Data.Hsql.SharpHsqlRowUpdatedEventArgs">
            <summary>
            RowUpdated argument class for Hsql ADO.NET data provider.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Default constructor
            </summary>
            <param name="row"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlRowUpdatedEventArgs.Command">
            <summary>
            Command beign executed.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlRowUpdatingEventArgs">
            <summary>
            RowUpdating argument class for Hsql ADO.NET data provider.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Default constructor.
            </summary>
            <param name="row"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlRowUpdatingEventArgs.Command">
            <summary>
            Command beign executed.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlException">
            <summary>
            Exception class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary>
            <remarks>Not serializable for Compact Framework 1.0</remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlException.#ctor">
            <summary>
            Internal default constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlException.#ctor(System.String)">
            <summary>
            Constructor using an error string.
            </summary>
            <param name="error"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <remarks>Not supported on Compact Framework 1.0</remarks>
            <param name="si"></param>
            <param name="sc"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method.
            </summary>
            <remarks>Not supported on Compact Framework 1.0</remarks>
            <param name="si"></param>
            <param name="context"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlException.Errors">
            <summary>
            Error collection.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlException.Message">
            <summary>
            Exception message.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlException.Number">
            <summary>
            Exception error number.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlException.Procedure">
            <summary>
            Procedure where the exception was generated.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlException.Source">
            <summary>
            Source of the error.
            </summary>
            <remarks>Not supported on Compact Framework 1.0</remarks></member>
        <member name="T:System.Data.Hsql.SharpHsqlParameter">
            <summary>
            Parameter class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor">
            <summary>
            Default constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructor setting the parameter data type.
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor setting the parameter value and using data type automatic inference.
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Constructor setting the data type and size.
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructor setting the data type, size and source column.
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="sourceColumn"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor setting the data type, size, direction, nullability, precision, scale, source column, row version and value.
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <param name="isNullable"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="sourceColumn"></param>
            <param name="sourceVersion"></param>
            <param name="value"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Precision">
            <summary>
            Get or set the parameter precision.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Scale">
            <summary>
            Get or set the parameter scale.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Size">
            <summary>
            Get or set the parameter size.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Direction">
            <summary>
            Get or set the parameter direction.
            <seealso cref="T:System.Data.ParameterDirection" />
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.DbType">
            <summary>
            Get or set the parameter <see cref="T:System.Data.DbType" />.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Value">
            <summary>
            Get or set the parameter value.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.IsNullable">
            <summary>
            Get or set the parameter nullability.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.SourceVersion">
            <summary>
            Get or set the parameter <see cref="T:System.Data.DataRowVersion" />.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.ParameterName">
            <summary>
            Get or set the parameter name.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.SourceColumn">
            <summary>
            Get or set the parameter source column name.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Suppress">
            <summary>
            Flag that indicates if this parameter must be excluded.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameter.Parent">
            <summary>
            Internal reference to the parent collection.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.SetProperties(System.String,System.String,System.Data.DataRowVersion,System.Byte,System.Byte,System.Int32,System.Boolean,System.Int32,System.Data.ParameterDirection,System.Object,System.Data.DbType,System.Boolean,System.Boolean)">
            <summary>
            Sets the parameter properties.
            </summary>
            <param name="name"></param>
            <param name="column"></param>
            <param name="version"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="size"></param>
            <param name="forceSize"></param>
            <param name="offset"></param>
            <param name="direction"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="suppress"></param>
            <param name="inferType"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.Clone">
            <summary>
            Returns a new cloned instance of the current parameter.
            </summary>
            <returns>The cloned <see cref="T:System.Data.Hsql.SharpHsqlParameter" /> instance.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlParameter.System#ICloneable#Clone">
            <summary>
            Returns a new cloned instance of the current parameter.
            </summary>
            <returns>The cloned <see cref="T:System.Data.Hsql.SharpHsqlParameter" /> instance.</returns></member>
        <member name="T:System.Data.Hsql.SharpHsqlParameterCollection">
            <summary>
            Parameter Collection class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            </summary>
            <remarks>Not serializable on Compact Framework 1.0</remarks></member>
        <member name="P:System.Data.Hsql.SharpHsqlParameterCollection.Item(System.Int32)">
            <summary>
            Get or set parameters by index.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlReader">
            <summary>
            Reader class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlTransaction" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.#ctor(System.Data.Hsql.SharpHsqlCommand)">
            <summary>
            Internal constructor
            </summary>
            <param name="command"></param></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.RecordsAffected">
            <summary>
            Returns the count of recods affected by the last execution.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.IsClosed">
            <summary>
            Returns True is this reader is in closed state.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.NextResult">
            <summary>
            Fetches the next result set.
            </summary>
            <remarks>Not currently supported.</remarks>
            <returns>True if the operation was performed sucessfuly.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.Close">
            <summary>
            Closed the active open reader and frees any used resources.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.Read">
            <summary>
            Read the next row from the results.
            </summary>
            <returns>True if the read operation was sucessful.</returns></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.Depth">
            <summary>
            Returns the depth of the current results.
            </summary>
            <remarks>Not currently supported.</remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetSchemaTable">
            <summary>
            Gets the schema table from the reader metadata.
            </summary>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.System#IDisposable#Dispose">
            <summary>
            Cleans any used resources.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetInt32(System.Int32)">
            <summary>
            Get the Int32 value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.Item(System.String)">
            <summary>
            Get the value of the specified column name.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Get the value from the specified column index.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetValue(System.Int32)">
            <summary>
            Get the value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.IsDBNull(System.Int32)">
            <summary>
            Check for null value of a column.
            </summary>
            <param name="i"></param>
            <returns>True if the passed column index contains a null value.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes from a binary column.
            </summary>
            <param name="i">Column index.</param>
            <param name="fieldOffset">Offset of the field where start reading.</param>
            <param name="buffer">Buffer where read data will be left.</param>
            <param name="bufferOffset">Offset of the buffer where start writing.</param>
            <param name="length">Number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
            <remarks>
            If passed a null value as buffer, the method will return the total length
            of the data contained in the database field.
            </remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetByte(System.Int32)">
            <summary>
            Get the Byte value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetFieldType(System.Int32)">
            <summary>
            Get the Type of the data stored on the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetDecimal(System.Int32)">
            <summary>
            Get the Decimal value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetValues(System.Object[])">
            <summary>
            Get the column values from the row in an array.
            </summary>
            <param name="values">An object array containing the column values.</param>
            <returns>The count of values read.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified column by index.
            </summary>
            <param name="i">Column index.</param>
            <returns>Column name.</returns></member>
        <member name="P:System.Data.Hsql.SharpHsqlReader.FieldCount">
            <summary>
            Returns the current field count.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetInt64(System.Int32)">
            <summary>
            Get the Int64 value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetDouble(System.Int32)">
            <summary>
            Get the Double value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetBoolean(System.Int32)">
            <summary>
            Get the Boolean value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetGuid(System.Int32)">
            <summary>
            Get the Guid value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetDateTime(System.Int32)">
            <summary>
            Get the DateTime value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetOrdinal(System.String)">
            <summary>
            Obtinains the column index using the name.
            </summary>
            <param name="name">The column name.</param>
            <returns>The column index, or an exception if not found.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetDataTypeName(System.Int32)">
            <summary>
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetFloat(System.Int32)">
            <summary>
            Get the Float value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetData(System.Int32)">
            <summary>
            GetData method not supported.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters from a string column.
            </summary>
            <param name="i">Column index.</param>
            <param name="fieldOffset">Offset of the field where start reading.</param>
            <param name="buffer">Buffer where read data will be left.</param>
            <param name="bufferOffset">Offset of the buffer where start writing.</param>
            <param name="length">Number of bytes to read.</param>
            <returns>The number of characters read.</returns>
            <remarks>
            If passed a null value as buffer, the method will return the total length
            of the data contained in the database field.
            </remarks></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetString(System.Int32)">
            <summary>
            Get the String value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetChar(System.Int32)">
            <summary>
            Get the Char value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlReader.GetInt16(System.Int32)">
            <summary>
            Get the Int16 value from the specified column index.
            </summary>
            <param name="i"></param>
            <returns></returns></member>
        <member name="T:System.Data.Hsql.SharpHsqlTransaction">
            <summary>
            Transaction class for Hsql ADO.NET data provider.
            <seealso cref="T:System.Data.Hsql.SharpHsqlConnection" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlReader" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlParameter" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlCommand" />
            <seealso cref="T:System.Data.Hsql.SharpHsqlDataAdapter" />
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlTransaction.#ctor(System.Data.Hsql.SharpHsqlConnection,System.Data.IsolationLevel)">
            <summary>
            Transaction class constructor.
            </summary>
            <param name="connection"></param>
            <param name="isoLevel"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlTransaction.Rollback">
            <summary>
            Aborts the current active transaction.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlTransaction.Commit">
            <summary>
            Closes the current transaction applying all changes to the database.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlTransaction.DbConnection">
            <summary>
            Gets the connection instance used in the transaction.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlTransaction.Connection">
            <summary>
            Gets the connection instance used in the transaction.
            </summary></member>
        <member name="P:System.Data.Hsql.SharpHsqlTransaction.IsolationLevel">
            <summary>
            Gets the transaction isolation level.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlTransaction.Dispose">
            <summary>
            Dispose this transaction doing a rollback if needed.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlConnectionStringBuilder">
            <summary>
            Helper static class for building SharpHsql connection strings.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionStringBuilder.#ctor">
            <summary>
            Static constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Hsql.SharpHsqlConnectionString" /> object
            using a connection string.
            </summary>
            <param name="connstring"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionStringBuilder.ToString">
            <summary>
            Returns the connection string built.
            </summary>
            <returns></returns></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionStringBuilder.Database">
            <summary>
            Database name.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionStringBuilder.UserName">
            <summary>
            User name.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionStringBuilder.UserPassword">
            <summary>
            User password.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionStringBuilder.invariantComparer">
            <summary>
            Class used internally for comparisons.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlDbProviderFactory">
            <summary>
            Sharp hsql db provider factory.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlDbProviderFactory.Instance">
            <summary>
            Static instance member which returns an instanced SharpHsqlFactory class.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateCommand">
            <summary>
            Returns a new SharpHsqlCommand object.
            </summary>
            <returns>A SharpHsqlCommand object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateCommandBuilder">
            <summary>
            Returns a new SharpHsqlCommandBuilder object.
            </summary>
            <returns>A SharpHsqlCommandBuilder object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateConnection">
            <summary>
            Creates a new SharpHsqlConnection.
            </summary>
            <returns>A SharpHsqlConnection object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateConnectionStringBuilder">
            <summary>
            Creates a new SharpHsqlConnectionStringBuilder.
            </summary>
            <returns>A SharpHsqlConnectionStringBuilder object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateDataAdapter">
            <summary>
            Creates a new SharpHsqlDataAdapter.
            </summary>
            <returns>A SharpHsqlDataAdapter object.</returns></member>
        <member name="M:System.Data.Hsql.SharpHsqlDbProviderFactory.CreateParameter">
            <summary>
            Creates a new SharpHsqlParameter.
            </summary>
            <returns>A SharpHsqlParameter object.</returns></member>
        <member name="T:SharpHsql.Tokenizer">
            <summary>
            Tokenizer class.
            </summary></member>
        <member name="T:System.Data.Hsql.SharpHsqlConnectionString">
            <summary>
            Helper static class for building SharpHsql connection strings.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionString.#ctor">
            <summary>
            Static constructor.
            </summary></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionString.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Hsql.SharpHsqlConnectionString" /> object
            using a connection string.
            </summary>
            <param name="connstring"></param></member>
        <member name="M:System.Data.Hsql.SharpHsqlConnectionString.ToString">
            <summary>
            Returns the connection string built.
            </summary>
            <returns></returns></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionString.Database">
            <summary>
            Database name.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionString.UserName">
            <summary>
            User name.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionString.UserPassword">
            <summary>
            User password.
            </summary></member>
        <member name="F:System.Data.Hsql.SharpHsqlConnectionString.invariantComparer">
            <summary>
            Class used internally for comparisons.
            </summary></member>
    </members>
</doc>
